import { AxiosResponse } from 'axios'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import qs from 'qs'
import React from 'react'
import ArticleList from '../../components/ArticleList'
import Tabs from '../../components/Tabs'
import { fetchArticles, fetchCategories } from '../../http'
import { IArticle, ICategory, ICollectionResponse, IPagination } from '../../types'
import { capitalizeFirstLetter } from '../../utils'

interface IPropType {
  categories: {
    items: ICategory[];
    pagination: IPagination;
  },
  articles: {
    items: IArticle[];
    pagination: IPagination;
  }
}
function category({ categories, articles }: IPropType) {
  const formatedCategory = () => {
    return capitalizeFirstLetter('TEST APP')
  }
  
  return (
    <>
      <Head>
        <title>Blog Next {formatedCategory()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categories={categories.items} />
      <ArticleList articles={articles.items} />
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {


  const options = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    filters: {
      category: {
        slug: query.category
      },
    },
    pagination: {
      page: query.page ? + query.page : 1,
      pageSize: 1
    }

  }
  const queryString = qs.stringify(options)
  console.info(queryString);
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString)

  const {
    data: categories,
  }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();
  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      }
    }
  }
}

export default category